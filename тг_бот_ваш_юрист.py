import telebot
import time
import requests
import os
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from tinydb import TinyDB, Query
from datetime import datetime, timedelta

TOKEN = ""

bot = telebot.TeleBot(TOKEN)
ADMIN_TELEGRAM_ID =

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ (UTC+3)
def get_moscow_time():
    return datetime.now() + timedelta(hours=3)

def format_moscow_time():
    return get_moscow_time().strftime("%d.%m.%Y %H:%M")

try:
    db = TinyDB('review.json')
    Consultations = db.table('Consultations')
    Supports = db.table('Supports')
    Reviews = db.table('Reviews')
    Review = Query()
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
    exit(1)

user_data = {}
user_review_messages = {}
user_files = {}
user_waiting_for_files = {}
admin_history_messages = {}
admin_current_page_files = {}

def save_consultation(user_id, name, history, files=None):
    try:
        return Consultations.insert({
            'user_id': user_id,
            'name': name,
            'history': history,
            'files': files or [],
            'status': 'new',
            'timestamp': time.time(),
            'date': format_moscow_time()
        })
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏: {e}")
        return None

def save_supports(user_id, name, history, files=None):
    try:
        return Supports.insert({
            'user_id': user_id,
            'name': name,
            'history': history,
            'files': files or [],
            'status': 'new',
            'timestamp': time.time(),
            'date': format_moscow_time()
        })
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—è: {e}")
        return None

def save_review(user_id, review_text, rating, user_history=''):
    try:
        return Reviews.insert({
            'user_id': user_id,
            'review': review_text,
            'rating': rating,
            'has_history': bool(user_history),
            'type': 'after_completion' if user_history else 'voluntary',
            'timestamp': time.time(),
            'date': format_moscow_time()
        })
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞: {e}")
        return None

def get_user_history(user_id):
    try:
        consultations = Consultations.search((Review.user_id == user_id) & (Review.status == 'completed'))
        supports = Supports.search((Review.user_id == user_id) & (Review.status == 'completed'))

        history_text = ""

        if consultations:
            for consult in consultations:
                history_text += f"{consult['history']}\n"

        if supports:
            for support in supports:
                history_text += f"{support['history']}\n"

        return history_text.strip()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        return ""

def get_average_rating():
    try:
        reviews = Reviews.all()
        if not reviews:
            return 0, 0

        total_rating = sum(review.get('rating', 0) for review in reviews)
        average = total_rating / len(reviews)
        return round(average, 1), len(reviews)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞: {e}")
        return 0, 0

def format_rating_stars(rating):
    try:
        stars = ""
        full_stars = int(rating)
        half_star = rating - full_stars >= 0.5

        for i in range(5):
            if i < full_stars:
                stars += "‚≠ê"
            elif i == full_stars and half_star:
                stars += "‚ú®"
            else:
                stars += "‚òÜ"
        return stars
    except:
        return "‚≠ê‚òÜ‚òÜ‚òÜ‚òÜ"

def is_admin(user_id):
    return user_id == ADMIN_TELEGRAM_ID

def admin_menu():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    keyboard.add(
        KeyboardButton("üìã –ò—Å—Ç–æ—Ä–∏—è"),
        KeyboardButton("‚≠ê –û—Ç–∑—ã–≤—ã")
    )
    keyboard.add(
        KeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
    )
    return keyboard

def user_menu():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    keyboard.add(
        KeyboardButton("üë®‚Äçüíº –ó–∞–ø–∏—Å—å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é"),
        KeyboardButton("üèÉ –°–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ –≤ —Å—É–¥–µ")
    )
    keyboard.add(
        KeyboardButton("üìù –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"),
        KeyboardButton("‚≠ê –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã")
    )
    return keyboard

@bot.message_handler(commands=['start'])
def start(message):
    try:
        user_id = message.from_user.id

        if is_admin(user_id):
            welcome_text = "üëë –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
            bot.send_message(message.chat.id, welcome_text, reply_markup=admin_menu())
        else:
            welcome_text = "üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤–∞—Å!\n\n–Ø –ø–æ–º–æ—â–Ω–∏–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –í–ê–® –Æ–†–ò–°–¢ (–¢–µ—Ä–µ–±–µ–Ω–∏–Ω –∏ –ø–∞—Ä—Ç–Ω—ë—Ä—ã).\n–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?"
            bot.send_message(message.chat.id, welcome_text, reply_markup=user_menu())

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start: {e}")

#---------------------–∫–æ–º–∞–Ω–¥–∞ –ò—Å—Ç–æ—Ä–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@bot.message_handler(func=lambda message: message.text == "üìã –ò—Å—Ç–æ—Ä–∏—è")
def show_admin_history(message):
    try:
        if not is_admin(message.from_user.id):
            bot.send_message(message.chat.id, "‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return

        show_history_page(message, 0)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã –∏—Å—Ç–æ—Ä–∏—è: {e}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞—è–≤–æ–∫.")

def show_history_page(message, page_num):
    try:
        user_id = message.chat.id

        if user_id in admin_history_messages:
            try:
                bot.delete_message(user_id, admin_history_messages[user_id])
            except:
                pass

        consultations = Consultations.all()
        supports = Supports.all()

        all_applications = []

        for consult in consultations:
            consult['type'] = 'consultation'
            consult['type_emoji'] = 'üë®‚Äçüíº'
            consult['type_text'] = '–ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–Ø'
            all_applications.append(consult)

        for support in supports:
            support['type'] = 'support'
            support['type_emoji'] = 'üèÉ'
            support['type_text'] = '–°–û–ü–†–û–í–û–ñ–î–ï–ù–ò–ï'
            all_applications.append(support)

        all_applications.sort(key=lambda x: x.get('timestamp', 0), reverse=True)

        if not all_applications:
            bot.send_message(user_id, "–ò—Å—Ç–æ—Ä–∏—è –∑–∞—è–≤–æ–∫ –ø—É—Å—Ç–∞.", reply_markup=admin_menu())
            return

        applications_per_page = 3
        start_index = page_num * applications_per_page
        end_index = start_index + applications_per_page
        page_applications = all_applications[start_index:end_index]

        if not page_applications:
            bot.send_message(user_id, "üìÑ –≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏—Å—Ç–æ—Ä–∏–∏.", reply_markup=admin_menu())
            return

        admin_current_page_files[user_id] = []

        text = f"üìã –ò–°–¢–û–†–ò–Ø –ó–ê–Ø–í–û–ö\n\n"
        text += f"–í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {len(all_applications)}\n"
        text += f"–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π: {len(consultations)}\n"
        text += f"–°–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–π: {len(supports)}\n"
        text += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"

        for i, app in enumerate(page_applications, start=start_index + 1):
            try:
                chat = bot.get_chat(app['user_id'])
                user_link = f"//t.me/{chat.username}" if chat.username else f"tg://user?id={app['user_id']}"
            except Exception as e:
                user_link = f"tg://user?id={app['user_id']}"

            status_emoji = "‚úÖ" if app.get('status') == 'completed' else "üÜï"
            status_text = "–ó–ê–í–ï–†–®–ï–ù–û" if app.get('status') == 'completed' else "–ù–û–í–ê–Ø"

            text += f"{app['type_emoji']} {app['type_text']} {status_emoji}\n"
            text += f"–°—Ç–∞—Ç—É—Å: {status_text}\n"
            text += f"–î–∞—Ç–∞: {app.get('date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
            text += f"–ò–º—è: {app['name']}\n"
            text += f"–ò—Å—Ç–æ—Ä–∏—è: {app['history'][:100]}{'...' if len(app['history']) > 100 else ''}\n"
            text += f"–§–∞–π–ª–æ–≤: {len(app.get('files', []))}\n"
            text += f"–ö–ª–∏–µ–Ω—Ç: {user_link}\n"
            text += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"

            if app.get('files'):
                for file_data in app['files']:
                    file_data_with_meta = file_data.copy()
                    file_data_with_meta['application_type'] = app['type']
                    file_data_with_meta['application_id'] = app.doc_id
                    file_data_with_meta['user_name'] = app['name']
                    file_data_with_meta['date'] = app.get('date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
                    admin_current_page_files[user_id].append(file_data_with_meta)

        keyboard = InlineKeyboardMarkup()
        row_buttons = []

        if page_num > 0:
            row_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f'admin_prev_{page_num - 1}'))

        if end_index < len(all_applications):
            row_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f'admin_next_{page_num + 1}'))

        if row_buttons:
            keyboard.add(*row_buttons)

        total_files_current_page = len(admin_current_page_files.get(user_id, []))
        if total_files_current_page > 0:
            keyboard.add(InlineKeyboardButton(f"üì• –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª—ã ({total_files_current_page})", callback_data="admin_download_current_page_files"))

        keyboard.add(InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="admin_close_history"))

        sent_message = bot.send_message(
            user_id,
            text,
            reply_markup=keyboard
        )
        admin_history_messages[user_id] = sent_message.message_id

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞—è–≤–æ–∫.")

@bot.callback_query_handler(func=lambda call: call.data.startswith('admin_'))
def handle_admin_callbacks(call):
    try:
        if not is_admin(call.from_user.id):
            bot.answer_callback_query(call.id, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return

        if call.data.startswith('admin_next_'):
            page_num = int(call.data.split('_')[2])
            show_history_page(call.message, page_num)
            bot.answer_callback_query(call.id)

        elif call.data.startswith('admin_prev_'):
            page_num = int(call.data.split('_')[2])
            show_history_page(call.message, page_num)
            bot.answer_callback_query(call.id)

        elif call.data == "admin_download_current_page_files":
            download_current_page_files(call)

        elif call.data == "admin_close_history":
            user_id = call.message.chat.id
            try:
                bot.delete_message(user_id, call.message.message_id)
                if user_id in admin_history_messages:
                    del admin_history_messages[user_id]
                if user_id in admin_current_page_files:
                    del admin_current_page_files[user_id]
            except:
                pass
            bot.answer_callback_query(call.id, "–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫—Ä—ã—Ç–∞")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–¥–º–∏–Ω callback: {e}")
        bot.answer_callback_query(call.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞")

def download_current_page_files(call):
    try:
        user_id = call.message.chat.id

        if user_id not in admin_current_page_files or not admin_current_page_files[user_id]:
            bot.answer_callback_query(call.id, "–ù–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤")
            return

        files_to_download = admin_current_page_files[user_id]

        bot.answer_callback_query(call.id, f"üì• –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É {len(files_to_download)} —Ñ–∞–π–ª–æ–≤...")

        bot.send_message(user_id, f"üì• –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã\n\n–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {len(files_to_download)}")

        successful_downloads = 0

        for i, file_data in enumerate(files_to_download, 1):
            try:
                app_type = "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è" if file_data['application_type'] == 'consultation' else "–°–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ"
                caption = f"üìÑ –§–∞–π–ª {i}/{len(files_to_download)}\n"
                caption += f"–¢–∏–ø: {app_type}\n"
                caption += f"–ö–ª–∏–µ–Ω—Ç: {file_data['user_name']}\n"
                caption += f"–î–∞—Ç–∞: {file_data['date']}"

                if file_data['file_type'] == 'document':
                    bot.send_document(user_id, file_data['file_id'], caption=caption)
                elif file_data['file_type'] == 'photo':
                    bot.send_photo(user_id, file_data['file_id'], caption=caption)
                elif file_data['file_type'] == 'video':
                    bot.send_video(user_id, file_data['file_id'], caption=caption)

                successful_downloads += 1

                if i % 5 == 0:
                    time.sleep(1)

            except Exception as e:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ {i}: {str(e)}"
                if len(error_msg) > 200:
                    error_msg = error_msg[:200] + "..."
                bot.send_message(user_id, error_msg)

        bot.send_message(user_id, f"‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {successful_downloads}/{len(files_to_download)} —Ñ–∞–π–ª–æ–≤")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
        bot.answer_callback_query(call.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤")

#---------------------–ø—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@bot.message_handler(func=lambda message: message.text == "‚≠ê –û—Ç–∑—ã–≤—ã")
def show_admin_reviews(message):
    try:
        if not is_admin(message.from_user.id):
            bot.send_message(message.chat.id, "‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return

        show_reviews_page(message, 0)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–∑—ã–≤—ã: {e}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç–∑—ã–≤–æ–≤.", reply_markup=admin_menu())

#---------------------–ø—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
@bot.message_handler(func=lambda message: message.text == "‚≠ê –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã")
def show_user_reviews(message):
    try:
        if is_admin(message.from_user.id):
            bot.send_message(message.chat.id, "‚õî –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –æ—Ç–∑—ã–≤—ã —á–µ—Ä–µ–∑ —ç—Ç–æ –º–µ–Ω—é.", reply_markup=admin_menu())
            return

        show_reviews_page(message, 0)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–∑—ã–≤–æ–≤: {e}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç–∑—ã–≤–æ–≤.", reply_markup=user_menu())

def show_reviews_page(message, page_num):
    try:
        user_id = message.chat.id
        is_admin_user = is_admin(user_id)

        if user_id in user_review_messages:
            try:
                bot.delete_message(user_id, user_review_messages[user_id])
            except:
                pass

        reviews = Reviews.all()
        if not reviews:
            if is_admin_user:
                bot.send_message(user_id, "–ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –æ—Ç–∑—ã–≤–∞.", reply_markup=admin_menu())
            else:
                bot.send_message(user_id, "–ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –æ—Ç–∑—ã–≤–∞.", reply_markup=user_menu())
            return

        reviews_per_page = 2
        start_index = page_num * reviews_per_page
        end_index = start_index + reviews_per_page
        page_reviews = reviews[start_index:end_index]

        if not page_reviews:
            if is_admin_user:
                bot.send_message(user_id, "üìÑ –≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ç–∑—ã–≤–æ–≤.", reply_markup=admin_menu())
            else:
                bot.send_message(user_id, "üìÑ –≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ç–∑—ã–≤–æ–≤.", reply_markup=user_menu())
            return

        avg_rating, total_reviews = get_average_rating()

        text = f"üìä –†–µ–π—Ç–∏–Ω–≥ –∫–æ–º–ø–∞–Ω–∏–∏: {format_rating_stars(avg_rating)} ({avg_rating}/5)\n"
        text += f"üë• –í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: {total_reviews}\n\n"
        text += "‚≠ê –û—Ç–∑—ã–≤—ã –∫–ª–∏–µ–Ω—Ç–æ–≤:\n"

        for i, review in enumerate(page_reviews, start=start_index + 1):
            review_text = review['review']
            if len(review_text) > 500:
                review_text = review_text[:500] + "..."

            text += f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            text += f"{format_rating_stars(review.get('rating', 5))}\n"
            text += f"{review_text}\n\n"

        if len(text) > 4000:
            text = text[:4000] + "\n\n‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —Å–æ–∫—Ä–∞—â–µ–Ω–æ –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Telegram"

        keyboard = InlineKeyboardMarkup()
        row_buttons = []

        if page_num > 0:
            row_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f'review_prev_{page_num - 1}'))

        if end_index < len(reviews):
            row_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f'review_next_{page_num + 1}'))

        if row_buttons:
            keyboard.add(*row_buttons)

        keyboard.add(InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="review_close"))

        sent_message = bot.send_message(user_id, text, reply_markup=keyboard)
        user_review_messages[user_id] = sent_message.message_id

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∑—ã–≤–æ–≤: {e}")
        if is_admin_user:
            bot.send_message(user_id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç–∑—ã–≤—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=admin_menu())
        else:
            bot.send_message(user_id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç–∑—ã–≤—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=user_menu())

@bot.callback_query_handler(func=lambda call: call.data.startswith('review_'))
def handle_review_pagination(call):
    try:
        if call.data.startswith('review_next_'):
            page_num = int(call.data.split('_')[2])
            show_reviews_page(call.message, page_num)
        elif call.data.startswith('review_prev_'):
            page_num = int(call.data.split('_')[2])
            show_reviews_page(call.message, page_num)
        elif call.data == "review_close":
            user_id = call.message.chat.id
            bot.delete_message(user_id, call.message.message_id)
            if user_id in user_review_messages:
                del user_review_messages[user_id]
            bot.answer_callback_query(call.id, "–û—Ç–∑—ã–≤—ã –∑–∞–∫—Ä—ã—Ç—ã")
        else:
            bot.answer_callback_query(call.id)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –æ—Ç–∑—ã–≤–æ–≤: {e}")
        bot.answer_callback_query(call.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")

#---------------------–æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–ª—å–∫–æ —Å –∞–¥–º–∏–Ω –∞–∫–∫–∞
@bot.message_handler(func=lambda message: message.text == "üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
def clean_all_databases(message):
    try:
        if not is_admin(message.from_user.id):
            bot.send_message(message.chat.id, "‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return

        keyboard = InlineKeyboardMarkup()
        keyboard.add(
            InlineKeyboardButton("‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ", callback_data="confirm_clean_all"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_clean")
        )

        bot.send_message(
            message.chat.id,
            "‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï!\n\n"
            "–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –í–°–ï –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:\n"
            "‚Ä¢ üë®‚Äçüíº –í—Å–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏\n"
            "‚Ä¢ üèÉ –í—Å–µ –∑–∞—è–≤–∫–∏ –Ω–∞ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ\n"
            "‚Ä¢ ‚≠ê –í—Å–µ –æ—Ç–∑—ã–≤—ã –∏ —Ä–µ–π—Ç–∏–Ω–≥–∏\n\n"
            "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å!\n"
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
            reply_markup=keyboard
        )
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã –æ—á–∏—Å—Ç–∫–∞: {e}")

@bot.callback_query_handler(func=lambda call: call.data in ["confirm_clean_all", "cancel_clean"])
def handle_clean_confirmation(call):
    try:
        if not is_admin(call.from_user.id):
            bot.answer_callback_query(call.id, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return

        if call.data == "confirm_clean_all":
            Consultations.truncate()
            Supports.truncate()
            Reviews.truncate()

            user_data.clear()
            user_files.clear()
            user_waiting_for_files.clear()
            user_review_messages.clear()
            admin_history_messages.clear()
            admin_current_page_files.clear()

            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text="‚úÖ –í–°–ï –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω—ã!\n\n"
                     "‚Ä¢ üë®‚Äçüíº –ó–∞—è–≤–∫–∏ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏: 0\n"
                     "‚Ä¢ üèÉ –ó–∞—è–≤–∫–∏ –Ω–∞ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ: 0\n"
                     "‚Ä¢ ‚≠ê –û—Ç–∑—ã–≤—ã: 0\n\n"
                     "–í—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–∞–∫–∂–µ —É–¥–∞–ª–µ–Ω—ã.",
                reply_markup=None
            )
            bot.answer_callback_query(call.id, "‚úÖ –í—Å–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω—ã")

        elif call.data == "cancel_clean":
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text="‚ùå –û—á–∏—Å—Ç–∫–∞ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–º–µ–Ω–µ–Ω–∞.",
                reply_markup=None
            )
            bot.answer_callback_query(call.id, "–û—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—á–∏—Å—Ç–∫–∏: {e}")

#---------------------–∑–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
@bot.message_handler(func=lambda message: message.text == "üë®‚Äçüíº –ó–∞–ø–∏—Å—å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é")
def start_consultation(message):
    try:
        if is_admin(message.from_user.id):
            bot.send_message(message.chat.id, "‚õî –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞—è–≤–∫–∏.", reply_markup=admin_menu())
            return

        user_id = message.chat.id
        user_data[user_id] = {'type': 'consultation'}
        user_files[user_id] = []
        user_waiting_for_files[user_id] = True

        user_data[user_id]['step'] = 'waiting_name'

        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏: {e}")
        bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=user_menu())

def get_name_consultation(message):
    try:
        user_id = message.chat.id

        if user_id not in user_data or user_data[user_id].get('step') != 'waiting_name':
            bot.send_message(user_id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –º–µ–Ω—é.", reply_markup=user_menu())
            return

        user_data[user_id]['name'] = message.text
        user_data[user_id]['step'] = 'waiting_history'

        bot.send_message(user_id, "–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –∫—Ä–∞—Ç–∫—É—é –∏—Å—Ç–æ—Ä–∏—é –≤–∞—à–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏:")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏: {e}")
        bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", reply_markup=user_menu())

def get_history_consultation(message):
    try:
        user_id = message.chat.id

        if user_id not in user_data or user_data[user_id].get('step') != 'waiting_history':
            bot.send_message(user_id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –º–µ–Ω—é.", reply_markup=user_menu())
            return

        user_data[user_id]['history'] = message.text
        user_waiting_for_files[user_id] = True
        user_data[user_id]['step'] = 'waiting_files'

        bot.send_message(
            user_id,
            "üìé –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª—ã, —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –∫ –≤–∞—à–µ–π –∑–∞—è–≤–∫–µ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –æ–¥–Ω–∏–º –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏.\n\n–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
            reply_markup=create_files_keyboard()
        )

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏: {e}")
        bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", reply_markup=user_menu())

#-------------------------–∑–∞—è–≤–∫–∞ –Ω–∞ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ
@bot.message_handler(func=lambda message: message.text == "üèÉ –°–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ –≤ —Å—É–¥–µ")
def start_support(message):
    try:
        if is_admin(message.from_user.id):
            bot.send_message(message.chat.id, "‚õî –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞—è–≤–∫–∏.", reply_markup=admin_menu())
            return

        user_id = message.chat.id
        user_data[user_id] = {'type': 'support'}
        user_files[user_id] = []
        user_waiting_for_files[user_id] = True

        user_data[user_id]['step'] = 'waiting_name'

        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—è: {e}")
        bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=user_menu())

def get_name_support(message):
    try:
        user_id = message.chat.id

        if user_id not in user_data or user_data[user_id].get('step') != 'waiting_name':
            bot.send_message(user_id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –º–µ–Ω—é.", reply_markup=user_menu())
            return

        user_data[user_id]['name'] = message.text
        user_data[user_id]['step'] = 'waiting_history'

        bot.send_message(user_id, "–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –∫—Ä–∞—Ç–∫—É—é –∏—Å—Ç–æ—Ä–∏—é –≤–∞—à–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏:")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—è: {e}")
        bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", reply_markup=user_menu())

def get_history_support(message):
    try:
        user_id = message.chat.id

        if user_id not in user_data or user_data[user_id].get('step') != 'waiting_history':
            bot.send_message(user_id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –º–µ–Ω—é.", reply_markup=user_menu())
            return

        user_data[user_id]['history'] = message.text
        user_waiting_for_files[user_id] = True
        user_data[user_id]['step'] = 'waiting_files'

        bot.send_message(
            user_id,
            "üìé –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª—ã, —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –∫ –≤–∞—à–µ–π –∑–∞—è–≤–∫–µ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –æ–¥–Ω–∏–º –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏.\n\n–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
            reply_markup=create_files_keyboard()
        )

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—è: {e}")
        bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", reply_markup=user_menu())

@bot.message_handler(content_types=['document', 'photo', 'video'])
def handle_files(message):
    try:
        user_id = message.chat.id

        if not user_waiting_for_files.get(user_id, False):
            if is_admin(user_id):
                bot.send_message(user_id, "üìé –§–∞–π–ª—ã –º–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–æ–¥–∞—á–µ –∑–∞—è–≤–∫–∏.", reply_markup=admin_menu())
            else:
                bot.send_message(user_id, "üìé –§–∞–π–ª—ã –º–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–æ–¥–∞—á–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –∏–ª–∏ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ.", reply_markup=user_menu())
            return

        if user_id not in user_files:
            user_files[user_id] = []

        file_info = None

        if message.document:
            file_info = bot.get_file(message.document.file_id)
            file_type = 'document'
        elif message.photo:
            file_info = bot.get_file(message.photo[-1].file_id)
            file_type = 'photo'
        elif message.video:
            file_info = bot.get_file(message.video.file_id)
            file_type = 'video'

        if file_info:
            user_files[user_id].append({
                'file_id': file_info.file_id,
                'file_type': file_type
            })
            bot.send_message(
                user_id,
                "‚úÖ –§–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω –∫ –∑–∞—è–≤–∫–µ. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ —Ñ–∞–π–ª—ã –∏–ª–∏ –Ω–∞–∂–∞—Ç—å '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–∞–π–ª–æ–≤'",
                reply_markup=create_files_keyboard()
            )
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤: {e}")

def create_files_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–∞–π–ª–æ–≤"))
    keyboard.add(KeyboardButton("üö´ –ë–µ–∑ —Ñ–∞–π–ª–æ–≤"))
    return keyboard

def create_rating_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=5)
    keyboard.add(
        InlineKeyboardButton("1‚≠ê", callback_data="rating_1"),
        InlineKeyboardButton("2‚≠ê", callback_data="rating_2"),
        InlineKeyboardButton("3‚≠ê", callback_data="rating_3"),
        InlineKeyboardButton("4‚≠ê", callback_data="rating_4"),
        InlineKeyboardButton("5‚≠ê", callback_data="rating_5")
    )
    return keyboard

@bot.message_handler(func=lambda message: message.text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–∞–π–ª–æ–≤")
def finish_files_consultation(message):
    try:
        user_id = message.chat.id
        user_waiting_for_files[user_id] = False

        if user_id in user_data and user_data[user_id]['type'] == 'consultation':
            send_consultation_to_admin(user_id, message.from_user)
        elif user_id in user_data and user_data[user_id]['type'] == 'support':
            send_support_to_admin(user_id, message.from_user)
        else:
            if is_admin(user_id):
                bot.send_message(user_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", reply_markup=admin_menu())
            else:
                bot.send_message(user_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞—è–≤–∫—É –∑–∞–Ω–æ–≤–æ.", reply_markup=user_menu())
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–æ–≤: {e}")

@bot.message_handler(func=lambda message: message.text == "üö´ –ë–µ–∑ —Ñ–∞–π–ª–æ–≤")
def no_files_consultation(message):
    try:
        user_id = message.chat.id
        user_waiting_for_files[user_id] = False
        user_files[user_id] = []

        if user_id in user_data and user_data[user_id]['type'] == 'consultation':
            send_consultation_to_admin(user_id, message.from_user)
        elif user_id in user_data and user_data[user_id]['type'] == 'support':
            send_support_to_admin(user_id, message.from_user)
        else:
            if is_admin(user_id):
                bot.send_message(user_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", reply_markup=admin_menu())
            else:
                bot.send_message(user_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞—è–≤–∫—É –∑–∞–Ω–æ–≤–æ.", reply_markup=user_menu())
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–µ–∑ —Ñ–∞–π–ª–æ–≤: {e}")

def send_consultation_to_admin(user_id, user_info):
    try:
        name = user_data[user_id]['name']
        history = user_data[user_id]['history']
        files = user_files.get(user_id, [])

        try:
            chat = bot.get_chat(user_id)
            user_link = f"//t.me/{chat.username}" if chat.username else f"tg://user?id={user_id}"
        except Exception as e:
            user_link = f"tg://user?id={user_id}"

        consultation_doc_id = save_consultation(user_id, name, history, files)

        consultation_text = f"""
üìã –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
–î–∞—Ç–∞: {format_moscow_time()}

–ö–æ–Ω—Ç–∞–∫—Ç—ã: {name}

–ò—Å—Ç–æ—Ä–∏—è: {history}

–§–∞–π–ª–æ–≤ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ: {len(files)}

–ö–ª–∏–µ–Ω—Ç: {user_link}
        """

        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É", callback_data=f"complete_consultation_{consultation_doc_id}"))

        bot.send_message(ADMIN_TELEGRAM_ID, consultation_text, reply_markup=keyboard)

        if files:
            bot.send_message(ADMIN_TELEGRAM_ID, "üìé –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
            for file_data in files:
                try:
                    if file_data['file_type'] == 'document':
                        bot.send_document(ADMIN_TELEGRAM_ID, file_data['file_id'])
                    elif file_data['file_type'] == 'photo':
                        bot.send_photo(ADMIN_TELEGRAM_ID, file_data['file_id'])
                    elif file_data['file_type'] == 'video':
                        bot.send_video(ADMIN_TELEGRAM_ID, file_data['file_id'])
                except Exception as e:
                    bot.send_message(ADMIN_TELEGRAM_ID, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")

        bot.send_message(user_id, "‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø—Ä–∏–Ω—è—Ç–∞. –í–∞–º —Å–∫–æ—Ä–æ –æ—Ç–≤–µ—Ç—è—Ç.", reply_markup=user_menu())

        if user_id in user_data:
            del user_data[user_id]
        if user_id in user_files:
            del user_files[user_id]
        if user_id in user_waiting_for_files:
            del user_waiting_for_files[user_id]

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –∞–¥–º–∏–Ω—É: {e}")
        bot.send_message(user_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=user_menu())

def send_support_to_admin(user_id, user_info):
    try:
        name = user_data[user_id]['name']
        history = user_data[user_id]['history']
        files = user_files.get(user_id, [])

        try:
            chat = bot.get_chat(user_id)
            user_link = f"//t.me/{chat.username}" if chat.username else f"tg://user?id={user_id}"
        except Exception as e:
            user_link = f"tg://user?id={user_id}"

        supports_doc_id = save_supports(user_id, name, history, files)

        supports_text = f"""
‚öñÔ∏è –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ –≤ —Å—É–¥
–î–∞—Ç–∞: {format_moscow_time()}

–ö–æ–Ω—Ç–∞–∫—Ç—ã: {name}

–ò—Å—Ç–æ—Ä–∏—è: {history}

–§–∞–π–ª–æ–≤ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ: {len(files)}

–ö–ª–∏–µ–Ω—Ç: {user_link}
        """

        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É", callback_data=f"complete_support_{supports_doc_id}"))

        bot.send_message(ADMIN_TELEGRAM_ID, supports_text, reply_markup=keyboard)

        if files:
            bot.send_message(ADMIN_TELEGRAM_ID, "üìé –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
            for file_data in files:
                try:
                    if file_data['file_type'] == 'document':
                        bot.send_document(ADMIN_TELEGRAM_ID, file_data['file_id'])
                    elif file_data['file_type'] == 'photo':
                        bot.send_photo(ADMIN_TELEGRAM_ID, file_data['file_id'])
                    elif file_data['file_type'] == 'video':
                        bot.send_video(ADMIN_TELEGRAM_ID, file_data['file_id'])
                except Exception as e:
                    bot.send_message(ADMIN_TELEGRAM_ID, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")

        bot.send_message(user_id, "‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ –≤ —Å—É–¥–µ –ø—Ä–∏–Ω—è—Ç–∞. –° –≤–∞–º–∏ —Å–∫–æ—Ä–æ —Å–≤—è–∂—É—Ç—Å—è.", reply_markup=user_menu())

        if user_id in user_data:
            del user_data[user_id]
        if user_id in user_files:
            del user_files[user_id]
        if user_id in user_waiting_for_files:
            del user_waiting_for_files[user_id]

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")
        bot.send_message(user_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=user_menu())

#---------------------–ü–†–û–°–¢–ê–Ø –°–ò–°–¢–ï–ú–ê –û–¢–ó–´–í–û–í
@bot.message_handler(func=lambda message: message.text == "üìù –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")
def ask_for_review(message):
    try:
        if is_admin(message.from_user.id):
            bot.send_message(message.chat.id, "‚õî –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –º–æ–∂–µ—Ç –æ—Å—Ç–∞–≤–ª—è—Ç—å –æ—Ç–∑—ã–≤—ã.", reply_markup=admin_menu())
            return

        user_id = message.chat.id
        # –ü—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤
        user_data[user_id] = {'leaving_review': True}

        bot.send_message(message.chat.id, "‚≠ê –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –Ω–∞—à—É —Ä–∞–±–æ—Ç—É –ø–æ 5-–±–∞–ª–ª—å–Ω–æ–π —à–∫–∞–ª–µ:",
                         reply_markup=create_rating_keyboard())

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç–∑—ã–≤–∞: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞
@bot.callback_query_handler(func=lambda call: call.data.startswith('rating_'))
def handle_rating_callback(call):
    try:
        user_id = call.from_user.id

        if user_id not in user_data or not user_data[user_id].get('leaving_review'):
            bot.answer_callback_query(call.id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–∑—ã–≤–∞ –∑–∞–Ω–æ–≤–æ")
            return

        rating = int(call.data.split('_')[1])
        user_data[user_id]['rating'] = rating

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        try:
            bot.delete_message(call.message.chat.id, call.message.message_id)
        except:
            pass

        bot.send_message(
            call.message.chat.id,
            f"‚úÖ –í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ü–µ–Ω–∫—É: {format_rating_stars(rating)}\n\n–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤:"
        )
        bot.answer_callback_query(call.id, f"‚úÖ –û—Ü–µ–Ω–∫–∞ {rating} –∑–≤–µ–∑–¥ –ø—Ä–∏–Ω—è—Ç–∞")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞: {e}")
        bot.answer_callback_query(call.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –æ—Ü–µ–Ω–∫–∏")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–∑—ã–≤–∞
@bot.message_handler(func=lambda message: user_data.get(message.from_user.id, {}).get('leaving_review') and user_data.get(message.from_user.id, {}).get('rating'))
def handle_review_text(message):
    try:
        user_id = message.from_user.id

        if user_id not in user_data:
            return

        review_text = message.text
        rating = user_data[user_id].get('rating', 5)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∑—ã–≤
        save_review(user_id, review_text, rating)

        bot.send_message(
            message.chat.id,
            f"‚úÖ –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤ –∏ –æ—Ü–µ–Ω–∫—É {format_rating_stars(rating)}!",
            reply_markup=user_menu()
        )

        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id in user_data:
            del user_data[user_id]

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞: {e}")
        bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=user_menu())

#---------------------–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
@bot.callback_query_handler(func=lambda call: call.data.startswith('complete_'))
def complete_work(call):
    try:
        if call.data.startswith('complete_consultation_'):
            consultation_id = int(call.data.split('_')[2])
            consultation = Consultations.get(doc_id=consultation_id)
            if consultation:
                user_id = consultation['user_id']
                Consultations.update({'status': 'completed'}, doc_ids=[consultation_id])

        elif call.data.startswith('complete_support_'):
            support_id = int(call.data.split('_')[2])
            support = Supports.get(doc_id=support_id)
            if support:
                user_id = support['user_id']
                Supports.update({'status': 'completed'}, doc_ids=[support_id])

        if 'user_id' in locals():
            review_keyboard = InlineKeyboardMarkup()
            review_keyboard.add(InlineKeyboardButton("‚≠ê –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data="leave_review_after_completion"))

            bot.send_message(
                user_id,
                "‚úÖ –†–∞–±–æ—Ç–∞ –ø–æ –≤–∞—à–µ–π –∑–∞—è–≤–∫–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—à—É –∫–æ–º–ø–∞–Ω–∏—é.\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ –æ –Ω–∞—à–µ–π —Ä–∞–±–æ—Ç–µ - —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –ª—É—á—à–µ!",
                reply_markup=review_keyboard
            )

            bot.answer_callback_query(call.id, "‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è")
            bot.edit_message_text(
                chat_id=ADMIN_TELEGRAM_ID,
                message_id=call.message.message_id,
                text=call.message.text + "\n\n‚úÖ –ó–ê–í–ï–†–®–ï–ù–û",
                reply_markup=None
            )
        else:
            bot.answer_callback_query(call.id, "‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã: {e}")

@bot.callback_query_handler(func=lambda call: call.data == "leave_review_after_completion")
def ask_for_review_after_completion(call):
    try:
        user_id = call.from_user.id

        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            bot.delete_message(call.message.chat.id, call.message.message_id)
        except:
            pass

        user_data[user_id] = {'leaving_review': True}
        bot.send_message(call.message.chat.id, "‚≠ê –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –Ω–∞—à—É —Ä–∞–±–æ—Ç—É –ø–æ 5-–±–∞–ª–ª—å–Ω–æ–π —à–∫–∞–ª–µ:",
                         reply_markup=create_rating_keyboard())
        bot.answer_callback_query(call.id)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç–∑—ã–≤–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {e}")

#---------------------–æ–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def handle_all_messages(message):
    try:
        user_id = message.chat.id

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞—è–≤–∫–∏
        if user_id in user_data:
            current_step = user_data[user_id].get('step')

            if current_step == 'waiting_name':
                if user_data[user_id]['type'] == 'consultation':
                    get_name_consultation(message)
                else:
                    get_name_support(message)
                return

            elif current_step == 'waiting_history':
                if user_data[user_id]['type'] == 'consultation':
                    get_history_consultation(message)
                else:
                    get_history_support(message)
                return

        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –æ—Ç–∑—ã–≤ –∏ –Ω–µ –∑–∞—è–≤–∫–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
        if not user_data.get(user_id, {}).get('leaving_review'):
            if is_admin(user_id):
                bot.send_message(message.chat.id, "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", reply_markup=admin_menu())
            else:
                bot.send_message(message.chat.id, "‚ùå –Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.", reply_markup=user_menu())

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

def run_bot():
    while True:
        try:
            print("üü¢ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
            bot.polling(none_stop=True, timeout=60)
        except requests.exceptions.ConnectionError as e:
            print(f"üî¥ –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
            print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
            time.sleep(5)
        except Exception as e:
            print(f"üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
            time.sleep(5)

if __name__ == "__main__":
    run_bot()

#–£—Å—Ç–æ–Ω–æ–≤–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫
#!pip install telebot
#!pip install tinydb
#!pip install Query
#!pip install TinyDB
